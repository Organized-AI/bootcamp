WEBVTT
Kind: captions
Language: en

00:00:06.720 --> 00:00:14.800
All right, welcome everybody. I was asked to talk&nbsp;
about uh tool use and some of them changes to our&nbsp;&nbsp;

00:00:14.800 --> 00:00:22.160
new models that have made them better at using&nbsp;
tools. And so I decided to uh use this opportunity&nbsp;&nbsp;

00:00:22.160 --> 00:00:30.480
to instead talk about QuadPlace's Pokemon uh which&nbsp;
uh I made. So I'm David. I'm on our team here. Uh&nbsp;&nbsp;

00:00:30.480 --> 00:00:35.840
I'm the creator of QuadPlays Pokemon. And what&nbsp;
we are going to do today is relaunch the stream&nbsp;&nbsp;

00:00:35.840 --> 00:00:40.240
live together. We're going to talk about it. Uh&nbsp;
and we're going to have a good f time. Could you&nbsp;&nbsp;

00:00:40.240 --> 00:00:47.520
flip over to my demo screen, please? All right.&nbsp;
Uh I have a button queued up to my machine in my&nbsp;&nbsp;

00:00:47.520 --> 00:00:52.560
house in my basement in Seattle, which is running&nbsp;
this. And I am going to hit enter. Uh but I need&nbsp;&nbsp;

00:00:52.560 --> 00:00:57.520
help from the crowd to countdown from 10 for me to&nbsp;
windmill slam this enter button. So, I'm going to&nbsp;&nbsp;

00:00:57.520 --> 00:01:04.960
start it, but I need all of you to participate.&nbsp;
It's very important for the vibes to run. 10 9 8&nbsp;&nbsp;

00:01:04.960 --> 00:01:20.880
7 6 5 4 3 2 1. Let's go. All right. Uh, so I'm&nbsp;
here to talk about Quadplays Pokemon because&nbsp;&nbsp;

00:01:20.880 --> 00:01:27.440
there's some new stuff that our models can do that&nbsp;
is really exciting. um and makes the models better&nbsp;&nbsp;

00:01:27.440 --> 00:01:31.120
at Pokemon, makes the models better at a lot of&nbsp;
things, makes the models better at being agents.&nbsp;&nbsp;

00:01:31.120 --> 00:01:34.640
What this actually going to practically look like,&nbsp;
and I'll show some examples later in some slides I&nbsp;&nbsp;

00:01:34.640 --> 00:01:41.600
have after we're done, is that our uh models will&nbsp;
like learn and adapt and think differently. So,&nbsp;&nbsp;

00:01:41.600 --> 00:01:44.640
in a minute, we're going to get to the name&nbsp;
entry screen. One of my favorite examples I&nbsp;&nbsp;

00:01:44.640 --> 00:01:50.560
show later is that uh the name entry screen, a&nbsp;
notoriously challenging place for Quad. Uh Quad&nbsp;&nbsp;

00:01:50.560 --> 00:01:54.960
does not quite understand how cursors move around&nbsp;
and it gets a little bit lost. it's a grid. It&nbsp;&nbsp;

00:01:54.960 --> 00:01:59.600
gets confused. Uh, one of the things that it's&nbsp;
really good at with this extended thinking mode&nbsp;&nbsp;

00:01:59.600 --> 00:02:03.680
is sort of like building a full plan of where it&nbsp;
needs to move, what it needs to do, that thing&nbsp;&nbsp;

00:02:03.680 --> 00:02:08.400
between tool calls. So, in the past, it might not&nbsp;
sort of use that extended thinking, reconsider&nbsp;&nbsp;

00:02:08.400 --> 00:02:15.840
its assumptions, question itself, figure out the&nbsp;
right answer. Uh, in Quad 4, uh, you will see that&nbsp;&nbsp;

00:02:15.840 --> 00:02:24.160
happen. Another feature we added in this uh new&nbsp;
version of quad that uh we have gotten asked for&nbsp;&nbsp;

00:02:24.160 --> 00:02:29.840
a lot is the ability to call multiple tool calls&nbsp;
at once. So parallel tool calling is the other&nbsp;&nbsp;

00:02:29.840 --> 00:02:36.160
name. Uh in quad 3.7 it was like frustratingly bad&nbsp;
at this. It would only call one tool at any given&nbsp;&nbsp;

00:02:36.160 --> 00:02:40.800
time. And what that means for you is practically&nbsp;
like when you're building an agent it'll call one&nbsp;&nbsp;

00:02:40.800 --> 00:02:44.640
tool and then it will like wait. You'll have&nbsp;
to make a whole another generation. and you'll&nbsp;&nbsp;

00:02:44.640 --> 00:02:51.360
get a whole time to first token hit between uh&nbsp;
between generations. With the new models, they are&nbsp;&nbsp;

00:02:51.360 --> 00:02:55.600
like much more keen to call multiple tools. Uh we&nbsp;
actually saw it right at the beginning. I haven't&nbsp;&nbsp;

00:02:55.600 --> 00:03:00.000
seen it since, but it will like do things in&nbsp;
Pokemon like take an action and update its memory&nbsp;&nbsp;

00:03:00.000 --> 00:03:05.040
at the same time. Uh which essentially just like&nbsp;
saves us tokens when we're building agents. The&nbsp;&nbsp;

00:03:05.040 --> 00:03:09.680
model is going to take more actions more quickly&nbsp;
and not need to sort of like go through the plan&nbsp;&nbsp;

00:03:09.680 --> 00:03:16.720
uh plan act loop as often. Tool use has evolved&nbsp;
rapidly uh in the last year. Uh when I first&nbsp;&nbsp;

00:03:16.720 --> 00:03:22.640
started helping customers with tool use last year,&nbsp;
a lot of it was like let's uh use a calculator&nbsp;&nbsp;

00:03:22.640 --> 00:03:26.480
give the model a calculator tool so it can do math&nbsp;
because the model's bad at math so it has this&nbsp;&nbsp;

00:03:26.480 --> 00:03:31.600
ability to spill over. These days that is not what&nbsp;
tool use gets used for. Tool use is the driver of&nbsp;&nbsp;

00:03:31.600 --> 00:03:36.880
agents. Uh when people build with tools, they give&nbsp;
models full suites of tools that enable agent or&nbsp;&nbsp;

00:03:36.880 --> 00:03:45.520
models to take long agentic actions and uh and&nbsp;
move forward. And so in that the agentic tool or&nbsp;&nbsp;

00:03:45.520 --> 00:03:52.080
loop, it is really revolves around tools. In an&nbsp;
agentic loop, uh the model will plan in action,&nbsp;&nbsp;

00:03:52.080 --> 00:03:57.440
act on whatever that plan was, learn something&nbsp;
from what it saw, and then repeat that until it's&nbsp;&nbsp;

00:03:57.440 --> 00:04:02.880
accomplished its goals. In Pokemon, it might say,&nbsp;
"I'm going to try to talk to my mom right now."&nbsp;&nbsp;

00:04:02.880 --> 00:04:07.360
The way it would do that is I'm going to press A.&nbsp;
Uh, and then it will reflect, see the dialogue box&nbsp;&nbsp;

00:04:07.360 --> 00:04:12.720
come up and see it worked and keep going with its&nbsp;
job to play Pokemon. So, let's talk about those&nbsp;&nbsp;

00:04:12.720 --> 00:04:18.240
two big improvements we talked about uh with&nbsp;
tool calling in Cloud 4. The first is improved&nbsp;&nbsp;

00:04:18.240 --> 00:04:25.360
planning by being able to use extended thinking&nbsp;
mode between tool calls. uh you are now able to&nbsp;&nbsp;

00:04:25.360 --> 00:04:30.240
uh see the model actually break down, build plans,&nbsp;
step back, reflect, question its assumptions&nbsp;&nbsp;

00:04:30.240 --> 00:04:35.840
between tool calls. And by calling multiple tools&nbsp;
at once, the models will be more efficient when&nbsp;&nbsp;

00:04:35.840 --> 00:04:43.520
acting as agents. Uh this has a practical impact&nbsp;
in Pokemon that we also didn't get to see. Uh so I&nbsp;&nbsp;

00:04:43.520 --> 00:04:47.280
want to talk a little bit about this interleaf&nbsp;
thinking, thinking between tool calls because&nbsp;&nbsp;

00:04:47.280 --> 00:04:53.760
there's some some clear examples in Pokemon of how&nbsp;
this works out. Uh in the past when you launched&nbsp;&nbsp;

00:04:53.760 --> 00:04:58.960
it, we actually saw this is the one thing we&nbsp;
actually did saw is when you hit run on a model,&nbsp;&nbsp;

00:04:58.960 --> 00:05:03.680
uh it would build the whole plan for how it was&nbsp;
going to beat Pokemon in its first message. Uh&nbsp;&nbsp;

00:05:03.680 --> 00:05:07.680
this was a terrible plan it would write. It would&nbsp;
say, I'm going to write my name down as Claude&nbsp;&nbsp;

00:05:07.680 --> 00:05:11.440
and I'm going to give my Pokemon nicknames and I'm&nbsp;
going to go beat Pokemon. And that's the extent of&nbsp;&nbsp;

00:05:11.440 --> 00:05:17.360
its planning. Uh and then it would hit uh a really&nbsp;
big horrible challenge which is the name entry&nbsp;&nbsp;

00:05:17.360 --> 00:05:23.840
screen and everything would fall apart. Uh, it&nbsp;
would occasionally hit left to move the cur cursor&nbsp;&nbsp;

00:05:23.840 --> 00:05:28.320
to a new letter and accidentally wrap around to&nbsp;
the other side of the screen and think, "How the&nbsp;&nbsp;

00:05:28.320 --> 00:05:32.640
heck did my cursor end up on the right side of&nbsp;
the screen? The game must be bugged. Everything&nbsp;&nbsp;

00:05:32.640 --> 00:05:39.760
is terrible." Uh, and now with the ability&nbsp;
to do extended thinking between tool calls,&nbsp;&nbsp;

00:05:39.760 --> 00:05:44.640
you'll see the model actually sort of catch these&nbsp;
errors more often, adjust, adapt it thinking,&nbsp;&nbsp;

00:05:44.640 --> 00:05:50.960
and and uh come up with a better plan. So in this&nbsp;
example, this is an actual trace from Quad 4 Opus&nbsp;&nbsp;

00:05:50.960 --> 00:05:55.520
where it says, "I'm really stumped. The cursor&nbsp;
went right instead of left when I hit left. What&nbsp;&nbsp;

00:05:55.520 --> 00:05:59.440
happened?" And then it will actually say, "Wait,&nbsp;
like let's step through. What actually happened?&nbsp;&nbsp;

00:05:59.440 --> 00:06:03.840
Where did the cursor go? It was at this letter,&nbsp;
this letter, this letter. Actually, what I think&nbsp;&nbsp;

00:06:03.840 --> 00:06:09.360
happened is like the cursor spilled over uh and&nbsp;
wrapped around to the other edge. Everything's&nbsp;&nbsp;

00:06:09.360 --> 00:06:12.960
okay. I understand how this works now. Let's&nbsp;
keep going with name entry." And it can sort of&nbsp;&nbsp;

00:06:12.960 --> 00:06:17.840
like pick that up and learn it. And that ability&nbsp;
to adapt on the fly is really meaningful as you&nbsp;&nbsp;

00:06:17.840 --> 00:06:27.040
build agents that are kind of expected to take&nbsp;
in tons of new information as they're building.

00:06:27.040 --> 00:06:32.560
Similarly, we have parallel tool calling. Uh&nbsp;
parallel tool calling more of an efficiency game.&nbsp;&nbsp;

00:06:32.560 --> 00:06:37.200
In the past, when you're sitting there waiting&nbsp;
to talk to mom, the model would press a talk and&nbsp;&nbsp;

00:06:37.200 --> 00:06:41.600
then if it wanted to update its knowledge base&nbsp;
to keep track of where it found mom in the past,&nbsp;&nbsp;

00:06:41.600 --> 00:06:44.720
it would have to take a whole another&nbsp;
action. can call out to call it again,&nbsp;&nbsp;

00:06:44.720 --> 00:06:49.680
wait for the time to first token hit, make&nbsp;
that change. Uh, with parallel tool calling,&nbsp;&nbsp;

00:06:49.680 --> 00:06:54.320
it can do both things at once. Basically, it&nbsp;
can say, "I'm going to talk to mom. I'm going&nbsp;&nbsp;

00:06:54.320 --> 00:06:58.640
to update my knowledge base. I want to advance&nbsp;
the dialogue six times by pressing A six times&nbsp;&nbsp;

00:06:58.640 --> 00:07:03.200
because I'm bored talking to mom." Uh, this&nbsp;
saves you time, saves your customers time,&nbsp;&nbsp;

00:07:03.200 --> 00:07:09.680
it speeds up how agents work. Um, and it will&nbsp;
make agents work more effectively uh for your&nbsp;&nbsp;

00:07:09.680 --> 00:07:17.520
customers that won't have to wait around for sort&nbsp;
of redundant tool calling and calls to cloud.

00:07:17.520 --> 00:07:23.520
And so what this means and what's next is that uh&nbsp;
models are getting better at being agents. This is&nbsp;&nbsp;

00:07:23.520 --> 00:07:28.080
obvious, we knew this, but this is one of the core&nbsp;
things we work on at Enthropic. We find ways to&nbsp;&nbsp;

00:07:28.080 --> 00:07:35.360
make models smarter when they're acting over long&nbsp;
time horizons and uh solving complex problems.&nbsp;&nbsp;

00:07:35.360 --> 00:07:39.200
Extended thinking between tool calls is an example&nbsp;
of this. It's something we've seen make a real&nbsp;&nbsp;

00:07:39.200 --> 00:07:45.520
impact on how effective agents are in the real&nbsp;
world. But I also want to talk about like quad is&nbsp;&nbsp;

00:07:45.520 --> 00:07:49.840
being trained to be a useful agent and an easier&nbsp;
one to build with. When we build our models,&nbsp;&nbsp;

00:07:49.840 --> 00:07:54.320
we try to listen to developers. We understand what&nbsp;
it means to give quad the capabilities that make&nbsp;&nbsp;

00:07:54.320 --> 00:07:59.280
it work more easily, more seamlessly, better&nbsp;
for users and we train those into our models&nbsp;&nbsp;

00:07:59.280 --> 00:08:03.360
too. Things like parallel tool calling that&nbsp;
we want to uh hear feedback and improve our&nbsp;&nbsp;

00:08:03.360 --> 00:08:08.160
models on model over model. I will uh let some&nbsp;
people ask questions. We can chat about this a&nbsp;&nbsp;

00:08:08.160 --> 00:08:14.240
little bit. Yeah, over here. Hey y uh hi. Uh&nbsp;
thanks cloud cloudbased Pokemon is awesome.&nbsp;&nbsp;

00:08:14.240 --> 00:08:19.040
Uh so one question I had was so you have many&nbsp;
low-level actions right which is like click&nbsp;&nbsp;

00:08:19.040 --> 00:08:23.840
button A click button B and then you also have&nbsp;
some highle actions like go to go to this point&nbsp;&nbsp;

00:08:23.840 --> 00:08:28.720
that you previously visited that's one of the high&nbsp;
level actions are all these in the same hierarchy&nbsp;&nbsp;

00:08:28.720 --> 00:08:32.400
of tools or how do you think of because when&nbsp;
you're building any agent like you know you have&nbsp;&nbsp;

00:08:32.400 --> 00:08:36.960
some sort of zoomed out view action that you want&nbsp;
to take and then some zoomed in click a button&nbsp;&nbsp;

00:08:36.960 --> 00:08:41.120
action y how do you think of this and should&nbsp;
it be flat should it be like a hierarchy how&nbsp;&nbsp;

00:08:41.120 --> 00:08:47.040
do you think of this thanks I think like designing&nbsp;
any agent, designing tools tends to be the thing&nbsp;&nbsp;

00:08:47.040 --> 00:08:53.200
that actually matters the most. Um, and this&nbsp;
is like the most simple set of tools. In fact,&nbsp;&nbsp;

00:08:53.200 --> 00:08:57.760
like I've aimed for simplicity with Pokemon. It's&nbsp;
somewhat a bad example in this sense. But what&nbsp;&nbsp;

00:08:57.760 --> 00:09:03.040
really matters is being clear like separating the&nbsp;
concerns of what tool should be used when, giving&nbsp;&nbsp;

00:09:03.040 --> 00:09:07.680
good examples of what tools should be used when&nbsp;
and how to do that. And so in the case of Pokemon,&nbsp;&nbsp;

00:09:07.680 --> 00:09:12.560
I have this tool that allows the model to navigate&nbsp;
to a specific place. Um, and then you have to just&nbsp;&nbsp;

00:09:12.560 --> 00:09:18.480
be very clear to it that it should use that when&nbsp;
it's trying to move around in the overworld. Uh,&nbsp;&nbsp;

00:09:18.480 --> 00:09:23.520
it's like I have I watched Claude play a&nbsp;
bunch and I found out that uh the model&nbsp;&nbsp;

00:09:23.520 --> 00:09:28.400
was quite bad at moving around in the overworld&nbsp;
its own. And so just basically telling it, hey,&nbsp;&nbsp;

00:09:28.400 --> 00:09:32.960
you're not good at this when you're trying to do&nbsp;
this set of tasks. This is the right tool to use.&nbsp;&nbsp;

00:09:32.960 --> 00:09:38.160
You'll have a better outcome versus if you're&nbsp;
in a battle uh just pressing buttons directly.&nbsp;&nbsp;

00:09:38.160 --> 00:09:42.400
You're perfectly capable of it's easier for you.&nbsp;
that's a good way to do it. And so I think about&nbsp;&nbsp;

00:09:42.400 --> 00:09:48.640
sort of like the loop of building these learn&nbsp;
like watch the model, see where it struggles,&nbsp;&nbsp;

00:09:48.640 --> 00:09:55.040
try to design and build tools that will help some&nbsp;
of the places it struggles and then write clear&nbsp;&nbsp;

00:09:55.040 --> 00:09:59.440
descriptions that help the model understand what&nbsp;
you have seen like what its shortcomings are, what&nbsp;&nbsp;

00:09:59.440 --> 00:10:05.360
it why it might need this tool, what scenarios&nbsp;
and and equip it with that knowledge. Uh I think&nbsp;&nbsp;

00:10:05.360 --> 00:10:11.840
there's it might come here. Yes, there there's a&nbsp;
pattern uh in which if you have like a bunch of&nbsp;&nbsp;

00:10:11.840 --> 00:10:17.120
tool functions and you don't want to necessarily&nbsp;
like clutter your current context with like a&nbsp;&nbsp;

00:10:17.120 --> 00:10:23.040
whole huge list, you adopt a helper which kind of&nbsp;
acts like a proxy where the model can say hey I&nbsp;&nbsp;

00:10:23.040 --> 00:10:28.640
want to accomplish this and then okay so you know&nbsp;
what I'm talking about. Have the dynamics of that&nbsp;&nbsp;

00:10:28.640 --> 00:10:34.480
particular pattern use changed at all with the new&nbsp;
model? Uh I don't think we like I have not studied&nbsp;&nbsp;

00:10:34.480 --> 00:10:40.640
and I don't think we really know how that will&nbsp;
break down with the new model. Um my expectation&nbsp;&nbsp;

00:10:40.640 --> 00:10:47.040
is that like telling the smarter a model gets the&nbsp;
more I trust it with the full context and to make&nbsp;&nbsp;

00:10:47.040 --> 00:10:52.560
complex decisions. So my gut with building&nbsp;
with opus would be or sonnet really like the&nbsp;&nbsp;

00:10:52.560 --> 00:10:58.160
quad four models is giving it the full list and&nbsp;
again maybe you're guessing about like context&nbsp;&nbsp;

00:10:58.160 --> 00:11:06.640
clutter and just like avoiding if the tools&nbsp;
are too long or maybe double click yeah follow

00:11:06.640 --> 00:11:14.560
your uh I think we've pretty confidently seen the&nbsp;
model be able to navigate order of like 50 to 100&nbsp;&nbsp;

00:11:14.560 --> 00:11:19.840
tools. It's just a question of def definition&nbsp;
though. Like the more as a human who writes&nbsp;&nbsp;

00:11:19.840 --> 00:11:26.080
prompts and writes tools out, the more that you&nbsp;
uh more tools you write, the less likely it is&nbsp;&nbsp;

00:11:26.080 --> 00:11:30.800
that you're going to be precise enough and where&nbsp;
and how you can actually define those tools to the&nbsp;&nbsp;

00:11:30.800 --> 00:11:34.560
model and sort of like divide the lines between&nbsp;
them. And so from my perspective, it's a little&nbsp;&nbsp;

00:11:34.560 --> 00:11:40.480
bit like welldesigned that's possible. if it gets&nbsp;
complicated or nuanced or the too much overlap,&nbsp;&nbsp;

00:11:40.480 --> 00:11:44.000
I think that's where you need to start figuring&nbsp;
out like patterns to delegate larger chunks of&nbsp;&nbsp;

00:11:44.000 --> 00:11:52.800
work or things like that. Uh so when you say that&nbsp;
uh we should give clear descriptions of what tools&nbsp;&nbsp;

00:11:52.800 --> 00:11:59.760
should be used when uh does that belong in&nbsp;
the prompt or does that belong in the tool&nbsp;&nbsp;

00:11:59.760 --> 00:12:06.240
uh description? I ask because I've been uh working&nbsp;
on agentic features myself and I find that if I&nbsp;&nbsp;

00:12:06.240 --> 00:12:12.320
pass in a JSON schema where I tell it about every&nbsp;
field and description in a way that's opinionated&nbsp;&nbsp;

00:12:12.320 --> 00:12:16.880
about what it's going to do, like that's generally&nbsp;
worked better for me. But on the other hand,&nbsp;&nbsp;

00:12:16.880 --> 00:12:22.000
I see these architecture advancements with&nbsp;
remote MCP servers where tools can be defined&nbsp;&nbsp;

00:12:22.000 --> 00:12:26.800
once and used in many other use cases. So I'm&nbsp;
I'm not really sure what to do. Yeah. Uh it's&nbsp;&nbsp;

00:12:26.800 --> 00:12:34.480
a great question. I um my lean is often to put&nbsp;
things in a tool description, but honestly I&nbsp;&nbsp;

00:12:34.480 --> 00:12:38.800
think you can do both. I mean when you the way&nbsp;
that our prompt gets rendered when you provide&nbsp;&nbsp;

00:12:38.800 --> 00:12:44.000
uh tools in a tool description is it just&nbsp;
renders the tools in the system prompt. And&nbsp;&nbsp;

00:12:44.000 --> 00:12:49.520
so mechanically the the gap in text between if&nbsp;
you would write it in the tool description and&nbsp;&nbsp;

00:12:49.520 --> 00:12:54.320
just below it in the system prompt is not that&nbsp;
much. And I think it matters more to just have&nbsp;&nbsp;

00:12:54.320 --> 00:12:57.520
queer descriptions and to be clear about what it&nbsp;
is. I think the thing that's nice about putting&nbsp;&nbsp;

00:12:57.520 --> 00:13:03.360
in a tool description is you're sort of like&nbsp;
separating what tool you're talking about when&nbsp;&nbsp;

00:13:03.360 --> 00:13:07.200
more like the way that we've trained it.&nbsp;
We're sort of like guaranteeing that the&nbsp;&nbsp;

00:13:07.200 --> 00:13:12.160
syntax that is used for the model to like read&nbsp;
and understand a tool description is something&nbsp;&nbsp;

00:13:12.160 --> 00:13:17.040
it's seen before. Whereas if you venture off&nbsp;
that path, there's a risk that you're going&nbsp;&nbsp;

00:13:17.040 --> 00:13:21.520
to do something that's not as easy for the&nbsp;
model to understand. Um, but I think like if&nbsp;&nbsp;

00:13:21.520 --> 00:13:29.920
you write a really strong prompt, it should work&nbsp;
similarly well in both situations, I'd expect.

00:13:29.920 --> 00:13:36.320
Uh, so 3.5 Sonic got stuck in Mount Moon for a&nbsp;
while. It did. Can it Can it make it out? Uh,&nbsp;&nbsp;

00:13:36.320 --> 00:13:40.400
it will make it out. This is okay. Let's talk&nbsp;
a little bit about Claude performance. This is&nbsp;&nbsp;

00:13:40.400 --> 00:13:48.400
a good chance to ramble here. Uh, Claude, this&nbsp;
is Opus is significantly better at Pokemon. Uh,&nbsp;&nbsp;

00:13:48.400 --> 00:13:54.400
but the ways that it's better are not the most&nbsp;
satisfying ways if you want to see uh, Pokemon&nbsp;&nbsp;

00:13:54.400 --> 00:14:00.400
get beat. It's like roughly as enabled to see the&nbsp;
Pokemon the Game Boy screen as it was before. So,&nbsp;&nbsp;

00:14:00.400 --> 00:14:04.160
we didn't like I don't know. I didn't go&nbsp;
to research and ask them to to make the&nbsp;&nbsp;

00:14:04.160 --> 00:14:07.920
model better at Game Boy screens. That's not&nbsp;
what our customers are asking for. It might&nbsp;&nbsp;

00:14:07.920 --> 00:14:13.840
be my favorite thing, but uh, wouldn't be a good&nbsp;
reflection. So, uh, it still struggles with some&nbsp;&nbsp;

00:14:13.840 --> 00:14:17.280
like navigation challenges and stuff like that&nbsp;
where it's just like not sure what it's seeing.&nbsp;&nbsp;

00:14:17.280 --> 00:14:22.400
its ability to plan and execute on a plan is&nbsp;
like miles ahead of where it was in the past. My&nbsp;&nbsp;

00:14:22.400 --> 00:14:28.480
favorite example of this that I've seen uh after&nbsp;
you get the third badge to go to Rock Tunnel,&nbsp;&nbsp;

00:14:28.480 --> 00:14:33.920
you need to get Flash the the HM. To do that, you&nbsp;
need to go catch at least 10 species of Pokemon&nbsp;&nbsp;

00:14:33.920 --> 00:14:38.480
and then like find some dude in a random building.&nbsp;
It found the dude in a random building. It found&nbsp;&nbsp;

00:14:38.480 --> 00:14:45.040
out it needed to catch 10 Pokemon and it went like&nbsp;
on a 24-hour grind session finding 10 Pokemon like&nbsp;&nbsp;

00:14:45.040 --> 00:14:49.360
uninterrupted. didn't get distracted, didn't do&nbsp;
anything else, catch 10 to Pokemon, like wander&nbsp;&nbsp;

00:14:49.360 --> 00:14:53.680
back, get flash, go straight to Rock Tunnel.&nbsp;
And it's like this ability to sort of plan and&nbsp;&nbsp;

00:14:53.680 --> 00:14:59.280
execute, like build a plan, and then like actually&nbsp;
track and execute against that over in this case&nbsp;&nbsp;

00:14:59.280 --> 00:15:05.520
like a 100 million tokens worth of information was&nbsp;
like by far the best I've ever seen from a model.&nbsp;&nbsp;

00:15:05.520 --> 00:15:10.080
So, uh, in this playthrough, as you watch at home,&nbsp;
as you watch on the demo thing, I think you'll&nbsp;&nbsp;

00:15:10.080 --> 00:15:16.720
see it gets stuck in Mount Moon for probably a&nbsp;
similar amount of time, if I had to guess, but,&nbsp;&nbsp;

00:15:16.720 --> 00:15:21.120
uh, you'll see it do some, uh, like miles more&nbsp;
intelligent things in the process of getting&nbsp;&nbsp;

00:15:21.120 --> 00:15:29.520
there. Funny how it works. Yeah. Hey, uh, I just&nbsp;
have a question about parallel tool calling. First&nbsp;&nbsp;

00:15:29.520 --> 00:15:34.800
time I've ever Is this state-of-the-art? I haven't&nbsp;
uh no models should be able to do this. I think&nbsp;&nbsp;

00:15:34.800 --> 00:15:39.520
like frankly like I wish 3.7 could have done this.&nbsp;
I don't think this is like an insane capability&nbsp;&nbsp;

00:15:39.520 --> 00:15:43.600
but it matters like it's just a useful thing for&nbsp;
people to be able to do. So just under the hood in&nbsp;&nbsp;

00:15:43.600 --> 00:15:48.320
your messages array that you're p interacting&nbsp;
with the model are you just doing some magic&nbsp;&nbsp;

00:15:48.320 --> 00:15:55.520
on your end to kind of pre it's kind of like on&nbsp;
the model to say hey I'm done. I I've described&nbsp;&nbsp;

00:15:55.520 --> 00:16:00.320
a set of tool calls I want to make and I'm done&nbsp;
or not. So the model in the past would just like&nbsp;&nbsp;

00:16:00.320 --> 00:16:05.280
make one tool call and say I'm want to wait for&nbsp;
the result of this. The model now is more likely&nbsp;&nbsp;

00:16:05.280 --> 00:16:10.240
to understand that in some cases I actually know&nbsp;
two or five or eight tool calls that I want to&nbsp;&nbsp;

00:16:10.240 --> 00:16:14.800
make right now and it will describe all of those&nbsp;
and then the object you get back in the API is&nbsp;&nbsp;

00:16:14.800 --> 00:16:18.240
has eight tool use blocks that say here are the&nbsp;
eight tools I want to use and then you're asked&nbsp;&nbsp;

00:16:18.240 --> 00:16:25.760
to go sort of like render those. Awesome. Thank&nbsp;
you. Yeah. So I'm I'm particularly interested with&nbsp;&nbsp;

00:16:25.760 --> 00:16:30.960
the idea, right? So with parallel tool calls, it&nbsp;
there are some cases where it's obvious that all&nbsp;&nbsp;

00:16:30.960 --> 00:16:35.920
the tool calls can actually happen in parallel,&nbsp;
but then there's like more of a planning sense&nbsp;&nbsp;

00:16:35.920 --> 00:16:41.760
where you showed like press A, press A, press A.&nbsp;
And so of course I'm like thrown back to being&nbsp;&nbsp;

00:16:41.760 --> 00:16:46.640
six in my mom's minivan and remembering when I&nbsp;
restarted a really long conversation because I was&nbsp;&nbsp;

00:16:46.640 --> 00:16:53.600
spamming A. Yep. And so I'm just like I'm nerdily&nbsp;
curious if that if it's ever done that where it's&nbsp;&nbsp;

00:16:53.600 --> 00:16:58.000
like impatiently restarted a conversation all the&nbsp;
time. But I think that that also like scratches&nbsp;&nbsp;

00:16:58.000 --> 00:17:02.880
out a deeper thing of like is there ever such&nbsp;
a thing as too too much planning and do you see&nbsp;&nbsp;

00:17:02.880 --> 00:17:09.280
it like being too opinionated about following&nbsp;
the plan and not updating with new information&nbsp;&nbsp;

00:17:09.280 --> 00:17:13.760
like the conversation has ended. I think this&nbsp;
is like the range for good prompting honestly.&nbsp;&nbsp;

00:17:13.760 --> 00:17:20.400
Um the so the reason that it actually hits many&nbsp;
buttons is you'll see its thought process say&nbsp;&nbsp;

00:17:20.400 --> 00:17:24.240
I'm going to hit a whole bunch of buttons and&nbsp;
I'll stop whenever it's done but it doesn't&nbsp;&nbsp;

00:17:24.240 --> 00:17:29.040
like quite have the sense of time like we do. So&nbsp;
if it says I want to hit A 500 times, it's like,&nbsp;&nbsp;

00:17:29.040 --> 00:17:33.680
oh, don't worry. I'll be I'll know when I have&nbsp;
finished the dialogue and then I'll stop. But&nbsp;&nbsp;

00:17:33.680 --> 00:17:38.800
it doesn't quite understand that it doesn't get&nbsp;
to see in between each one by default because&nbsp;&nbsp;

00:17:38.800 --> 00:17:43.520
like the the nature I don't know that's a very LLM&nbsp;
problem that you have to register 500 buttons and&nbsp;&nbsp;

00:17:43.520 --> 00:17:48.080
then close your eyes and then come back and find&nbsp;
out what happened. Um, but you can actually get&nbsp;&nbsp;

00:17:48.080 --> 00:17:52.320
around that just like with prompting and helping&nbsp;
the model understand what is happening, what are&nbsp;&nbsp;

00:17:52.320 --> 00:17:58.640
its limitations and uh what and how should it act.&nbsp;
So like in the system profit quad plays Pokemon,&nbsp;&nbsp;

00:17:58.640 --> 00:18:03.920
I just have to tell it when you register a&nbsp;
sequence of buttons. You don't get to see&nbsp;&nbsp;

00:18:03.920 --> 00:18:09.120
like you're not going to see and so there could&nbsp;
be side effects. Uh going restarting the dialogue&nbsp;&nbsp;

00:18:09.120 --> 00:18:13.520
is a simple version, but you can actually do like&nbsp;
much worse things in Pokemon. Like I've seen it&nbsp;&nbsp;

00:18:13.520 --> 00:18:17.440
overwrite one of its moves accidentally when it&nbsp;
was learning a new move in a way that was like&nbsp;&nbsp;

00:18:17.440 --> 00:18:25.360
quite bad for for making progress in the game.&nbsp;
Um and so this is like I think the space where&nbsp;&nbsp;

00:18:25.360 --> 00:18:31.600
uh someone building agents, you have a lot of room&nbsp;
to sort of see how models make mistakes like that,&nbsp;&nbsp;

00:18:31.600 --> 00:18:36.880
help them understand why and what's going on and&nbsp;
sort of like build that into how you prompt them.&nbsp;&nbsp;

00:18:36.880 --> 00:18:41.680
uh prompt agents and that's a lot of how I think&nbsp;
about sort of like iterating on agent design. So&nbsp;&nbsp;

00:18:41.680 --> 00:18:49.520
in our production agent we saw that in 3.7&nbsp;
there was uh some not very good consistency&nbsp;&nbsp;

00:18:49.520 --> 00:18:55.200
with calling about 18 tools versus like if&nbsp;
you were to just pass the model a single tool&nbsp;&nbsp;

00:18:55.200 --> 00:18:59.840
um and then just have the exact same prompt and&nbsp;
and have it call that. And you mentioned before&nbsp;&nbsp;

00:18:59.840 --> 00:19:06.080
that the four models are able to handle like&nbsp;
over a hundred tools. Are there any changes&nbsp;&nbsp;

00:19:06.080 --> 00:19:11.440
or differences you're seeing in in how you get&nbsp;
consistent performance among so many tools? Uh,&nbsp;&nbsp;

00:19:11.440 --> 00:19:17.120
I think these models we've pretty clearly seen&nbsp;
are much better at precise instruction following.&nbsp;&nbsp;

00:19:17.120 --> 00:19:20.800
It's going to be a double-edged sword. Like if&nbsp;
you're imprecise with the instructions you write,&nbsp;&nbsp;

00:19:20.800 --> 00:19:26.080
they'll they'll readily follow or get confused by&nbsp;
contrasting instructions sometimes. But I think&nbsp;&nbsp;

00:19:26.080 --> 00:19:31.360
the key is with like very good tool design and&nbsp;
very crisp prompting, we've seen that these models&nbsp;&nbsp;

00:19:31.360 --> 00:19:37.200
are like much more capable at following a pretty&nbsp;
long set of different and complex instructions and&nbsp;&nbsp;

00:19:37.200 --> 00:19:41.840
being able to use that to execute. So I think the&nbsp;
key is there's more room to hill climb on a prompt&nbsp;&nbsp;

00:19:41.840 --> 00:19:47.760
maybe is what I would say with these models which&nbsp;
is to say as you are making more and more precise&nbsp;&nbsp;

00:19:47.760 --> 00:19:51.840
uh descriptions of your tools there's more room&nbsp;
to get better and better across a wider range&nbsp;&nbsp;

00:19:51.840 --> 00:19:56.000
of tools and sort of like reach that same level&nbsp;
of performance you'd expect on a single tool. I&nbsp;&nbsp;

00:19:56.000 --> 00:20:00.640
think I am at time. I have successfully gave&nbsp;
a very different talk than I expected. But I&nbsp;&nbsp;

00:20:00.640 --> 00:20:05.919
appreciate you all for being here and it&nbsp;
was fun to chat with you all. [Applause]

