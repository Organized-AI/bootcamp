WEBVTT
Kind: captions
Language: en

00:00:05.520 --> 00:00:10.000
Hi everyone. I'm Obie Fernandez. Uh, and I'm&nbsp;
going to be talking to you today about some&nbsp;&nbsp;

00:00:10.000 --> 00:00:16.640
of the awesome things we're doing at Shopify. Uh,&nbsp;
leveraging the power of claude and claude code as&nbsp;&nbsp;

00:00:16.640 --> 00:00:23.280
part of uh, our massive in a way. I'll talk about&nbsp;
that in a second. Uh, first of all, I just want to&nbsp;&nbsp;

00:00:23.280 --> 00:00:28.560
introduce myself. My name is Obie Fernandez. I'm&nbsp;
a principal engineer in our augmented engineering&nbsp;&nbsp;

00:00:28.560 --> 00:00:34.640
group. I work on everything that has to do with&nbsp;
augmented engineering or in other words like using&nbsp;&nbsp;

00:00:34.640 --> 00:00:40.640
AI to improve developer experience at Shopify. I'm&nbsp;
also the author of a pretty interesting book that&nbsp;&nbsp;

00:00:40.640 --> 00:00:44.880
you might like called patterns of application&nbsp;
development using AI. So I hope that you look&nbsp;&nbsp;

00:00:44.880 --> 00:00:52.240
that up uh if you get a chance. Uh today we're&nbsp;
going to be talking about the challenges of scale&nbsp;&nbsp;

00:00:52.240 --> 00:00:58.560
at Shopify Engineering. We are a very uh fairly&nbsp;
large organization, probably one of the largest&nbsp;&nbsp;

00:00:58.560 --> 00:01:05.280
Ruby on Rails uh shops in the world. Uh our main&nbsp;
application we've been working on for almost 20&nbsp;&nbsp;

00:01:05.280 --> 00:01:13.600
years. Uh and has millions upon millions of lines&nbsp;
of code. It's probably about 5,000 uh repos uh in&nbsp;&nbsp;

00:01:13.600 --> 00:01:20.000
our organization last time I checked. and we're&nbsp;
generating about uh half a million PRs a year&nbsp;&nbsp;

00:01:20.000 --> 00:01:28.160
at last count which is a significant amount&nbsp;
of um stuff to take into account when you're&nbsp;&nbsp;

00:01:28.160 --> 00:01:35.200
uh you know doing anything with AI uh in terms of&nbsp;
your context and whatnot. Um, our core challenge&nbsp;&nbsp;

00:01:35.200 --> 00:01:43.200
is how do we maintain productivity or rather&nbsp;
that's what my my group focuses on and uh I'm here&nbsp;&nbsp;

00:01:43.200 --> 00:01:52.480
to kind of tell you some of the solutions we've&nbsp;
developed and how those interact with uh cloud.

00:01:52.480 --> 00:01:57.760
the the key really to understanding kind of&nbsp;
the point of what what I'm presenting is to&nbsp;&nbsp;

00:01:57.760 --> 00:02:04.720
understand that there there's two very&nbsp;
very different ways of using AI uh one&nbsp;&nbsp;

00:02:04.720 --> 00:02:10.320
which we've been immersed in throughout&nbsp;
this conference today are agentic tools&nbsp;&nbsp;

00:02:10.320 --> 00:02:16.560
uh when we're talking about how to leverage AI&nbsp;
uh as assistants and tooling there's this agentic&nbsp;&nbsp;

00:02:16.560 --> 00:02:21.360
approach which are ideal for scenarios&nbsp;
that require adaptive decisionmaking&nbsp;&nbsp;

00:02:22.640 --> 00:02:29.280
uh iteration and autonomy, right? They shine when&nbsp;
the tasks that you're you're trying to accomplish&nbsp;&nbsp;

00:02:29.280 --> 00:02:36.960
with AI help uh are exploratory or ambiguous&nbsp;
in some way and you're relying on the LM's&nbsp;&nbsp;

00:02:36.960 --> 00:02:43.440
reasoning and judgment uh because your path to&nbsp;
the solution is not known in advance. It might&nbsp;&nbsp;

00:02:43.440 --> 00:02:49.120
not be known in advance because it's a complex&nbsp;
domain that you're dealing with that has factors&nbsp;&nbsp;

00:02:49.120 --> 00:02:54.480
that are changing all the time. It might be very&nbsp;
very complicated and just kind of beyond what you&nbsp;&nbsp;

00:02:54.480 --> 00:02:59.280
know or it might be like something as simple as a&nbsp;
feature development where you're going to do some&nbsp;&nbsp;

00:02:59.280 --> 00:03:07.520
exploratory work to figure out how to implement&nbsp;
that feature. Uh those kinds of use cases as&nbsp;&nbsp;

00:03:07.520 --> 00:03:12.960
we've seen again and again today in the various&nbsp;
sessions are perfect for tools like cloud code.&nbsp;&nbsp;

00:03:12.960 --> 00:03:20.320
um anything that involves ongoing adaptation uh&nbsp;
debugging and iteration perfectly fantastic to&nbsp;&nbsp;

00:03:20.320 --> 00:03:31.520
give that to an agentic tool and see what it&nbsp;
can do. Um in contrast um structured workflow&nbsp;&nbsp;

00:03:31.520 --> 00:03:38.000
orchestration including what we can do with this&nbsp;
open source tool that I'm going to present to you&nbsp;&nbsp;

00:03:38.000 --> 00:03:44.960
in this uh presentation which we call roast&nbsp;
um are better for tasks that have predictable&nbsp;&nbsp;

00:03:44.960 --> 00:03:54.480
well- definfined steps uh cases where you seek&nbsp;
uh consistency repeatability and clear oversight.&nbsp;&nbsp;

00:03:55.360 --> 00:04:01.440
you want to leverage AI and these kind and&nbsp;
this kind of work for intelligent completion&nbsp;&nbsp;

00:04:01.440 --> 00:04:06.880
of components of that bigger workflow. So far,&nbsp;
I don't think I'm saying anything that is super&nbsp;&nbsp;

00:04:06.880 --> 00:04:12.320
exotic or or wild. It's really the difference&nbsp;
between non-deterministic and deterministic&nbsp;&nbsp;

00:04:12.320 --> 00:04:18.400
kind of behavior. Um, and it turns out that&nbsp;
like peanut butter and chocolate, you know,&nbsp;&nbsp;

00:04:18.400 --> 00:04:25.440
these make a great combination. Sometimes you want&nbsp;
one, sometimes you want the other. And examples&nbsp;&nbsp;

00:04:25.440 --> 00:04:30.720
of what these structured workflows are great for&nbsp;
are things like migrating legacy code bases. So&nbsp;&nbsp;

00:04:30.720 --> 00:04:36.880
for instance, going from Python 2 to Python 3,&nbsp;
uh from going whatever your current, you know,&nbsp;&nbsp;

00:04:36.880 --> 00:04:43.200
JavaScript implementation is based on to whatever&nbsp;
the new flavor of the month is. uh or as is the&nbsp;&nbsp;

00:04:43.200 --> 00:04:49.920
case uh with a lot of things that my team deals&nbsp;
with refactoring large systems where it isn't&nbsp;&nbsp;

00:04:49.920 --> 00:04:56.400
really an exploratory task like we know what we&nbsp;
want to do. Maybe we're addressing performance,&nbsp;&nbsp;

00:04:56.400 --> 00:05:01.280
maybe we're addressing technical debt that we&nbsp;
understand kind of what the basis is. So we&nbsp;&nbsp;

00:05:01.280 --> 00:05:08.800
know that we want to go through a certain amount&nbsp;
of steps. uh specifically the kinds of things&nbsp;&nbsp;

00:05:08.800 --> 00:05:16.320
that that we do at Shopify using roast uh which is&nbsp;
really what we extracted this open source library&nbsp;&nbsp;

00:05:16.320 --> 00:05:24.720
out of started with automated testing generation&nbsp;
and test optimization. So we looked at our over&nbsp;&nbsp;

00:05:24.720 --> 00:05:30.640
half a million tests associated with our main&nbsp;
monolith and said we would really like to address&nbsp;&nbsp;

00:05:30.640 --> 00:05:36.640
some of the coverage gaps in this codebase. So how&nbsp;
do we go about doing that? Of course, one approach&nbsp;&nbsp;

00:05:36.640 --> 00:05:42.400
would be to simply open up that project in cloud&nbsp;
code and say, "Hey, I want to address coverage&nbsp;&nbsp;

00:05:42.400 --> 00:05:49.840
gaps in this place." However, in practice,&nbsp;
it really it's it's really helpful to break&nbsp;&nbsp;

00:05:49.840 --> 00:05:55.040
down that problem in the way that you would do it&nbsp;
manually and say, "Okay, well, what would I do if&nbsp;&nbsp;

00:05:55.040 --> 00:06:00.880
I was going to work on test coverage?" Well, first&nbsp;
of all, I need to know what the test coverage is.&nbsp;&nbsp;

00:06:00.880 --> 00:06:05.760
If we know that every time we're going to do&nbsp;
a series of steps that calls for a structured&nbsp;&nbsp;

00:06:05.760 --> 00:06:11.520
workflow. For instance, running the coverage tool,&nbsp;
running the test, you know, to generate the report&nbsp;&nbsp;

00:06:11.520 --> 00:06:18.160
of what needs to be covered. So, taking a step&nbsp;
back for a second, we've been using Cloud Code&nbsp;&nbsp;

00:06:18.160 --> 00:06:22.720
for a while. We were one of the early shops that&nbsp;
actually adopted it. As soon as it launched, there&nbsp;&nbsp;

00:06:22.720 --> 00:06:27.040
was interest in using it. And as soon as people&nbsp;
started using it, we started seeing a lot of&nbsp;&nbsp;

00:06:27.040 --> 00:06:33.680
excitement in our Slack, right? So, I copied some&nbsp;
of the earliest comments I could find there from&nbsp;&nbsp;

00:06:33.680 --> 00:06:41.760
March, you know, from from some of our folks. And&nbsp;
I pulled this graph from from our AI proxy that&nbsp;&nbsp;

00:06:41.760 --> 00:06:48.880
Cloud Code runs through. And I think it's actually&nbsp;
a pretty a fairly impressive amount of usage. We&nbsp;&nbsp;

00:06:48.880 --> 00:06:56.080
have at peak now about 500 daily active users and&nbsp;
that number is growing rapidly. And as of lately,&nbsp;&nbsp;

00:06:56.080 --> 00:07:03.200
we hit 250,000 requests per second at at peak,&nbsp;
which is is an impressive amount, I believe. Um,&nbsp;&nbsp;

00:07:03.200 --> 00:07:11.200
and in fact, ROST itself, which is this open&nbsp;
source framework that I was telling you about,&nbsp;&nbsp;

00:07:11.200 --> 00:07:17.120
is called ROS because it helps you set your&nbsp;
money on fire. Yeah, think about it. So, anyway,&nbsp;&nbsp;

00:07:17.120 --> 00:07:23.040
what does it look like? I uh I let this video kind&nbsp;
of stay here at uh a workflow definition. So this&nbsp;&nbsp;

00:07:23.040 --> 00:07:29.360
is a workflow orchestration tool. There's nothing&nbsp;
super super exotic about it. Uh probably the most&nbsp;&nbsp;

00:07:29.360 --> 00:07:32.960
one of the most interesting things about it is&nbsp;
that it's implemented in Ruby, which is a bit&nbsp;&nbsp;

00:07:32.960 --> 00:07:40.080
of an oddity in this world where everyone uses py&nbsp;
python and typescript unfortunately. Uh however,&nbsp;&nbsp;

00:07:40.080 --> 00:07:46.640
you don't need to implement anything in Ruby&nbsp;
to use uh roast for your own things. This can&nbsp;&nbsp;

00:07:46.640 --> 00:07:54.000
actually help you interle uh prompt oriented kind&nbsp;
of tasks with bash scripts or you know whatever&nbsp;&nbsp;

00:07:54.000 --> 00:08:02.960
whatever you want to invoke. Um so anyway why did&nbsp;
why did we go through the trouble of writing roast&nbsp;&nbsp;

00:08:02.960 --> 00:08:11.520
and open sourcing it on my team? Well the thing is&nbsp;
uh our illustrious CEO uh Toby Licki has instilled&nbsp;&nbsp;

00:08:11.520 --> 00:08:19.120
throughout the years a culture of tinkering in the&nbsp;
company. So even without AI uh we have a culture&nbsp;&nbsp;

00:08:19.120 --> 00:08:24.800
where people are constantly working on homegrown&nbsp;
projects little skunk works little research uh you&nbsp;&nbsp;

00:08:24.800 --> 00:08:29.760
know things within their departments and this&nbsp;
is not only limited to engineering it's across&nbsp;&nbsp;

00:08:29.760 --> 00:08:33.840
the board you know I've seen people in sales and&nbsp;
support and things like that working on their own&nbsp;&nbsp;

00:08:33.840 --> 00:08:42.160
tooling AI exploded that so you know as soon as uh&nbsp;
you know vibe coding became a thing curs you know&nbsp;&nbsp;

00:08:42.160 --> 00:08:49.360
uh different kinds of tools came about and&nbsp;
were available like cloud code and and all the&nbsp;&nbsp;

00:08:49.360 --> 00:08:54.480
different kinds of you know chat completion. All&nbsp;
of a sudden everyone was coding across the company&nbsp;&nbsp;

00:08:54.480 --> 00:08:59.280
and specifically when it came to anything that&nbsp;
looks like a structured workflow or essentially&nbsp;&nbsp;

00:08:59.280 --> 00:09:04.080
a script that puts together a number of prompts&nbsp;
or chains them together. I think that there's&nbsp;&nbsp;

00:09:04.080 --> 00:09:07.760
probably safe to say that there's hundreds of&nbsp;
different ways that this has been implemented&nbsp;&nbsp;

00:09:07.760 --> 00:09:13.200
across your company. And if I see some of you&nbsp;
nodding like you if you work at big companies you&nbsp;&nbsp;

00:09:13.200 --> 00:09:20.560
probably have seen this like constant reinventing&nbsp;
of the wheel. You know some people are using&nbsp;&nbsp;

00:09:20.560 --> 00:09:25.280
um you know one frameworks you know some people&nbsp;
are using lang chain some people are just writing&nbsp;&nbsp;

00:09:25.280 --> 00:09:32.800
their own scripts etc etc. That's cool and&nbsp;
all, but it's better, you know, if you start&nbsp;&nbsp;

00:09:32.800 --> 00:09:36.720
identifying the common needs across the&nbsp;
organization and you you put something&nbsp;&nbsp;

00:09:36.720 --> 00:09:42.080
together to to really help them out. So that's&nbsp;
where ROS came from. And I want to tell you about&nbsp;&nbsp;

00:09:42.080 --> 00:09:46.320
the relationship with cloud code and roast because&nbsp;
it's a birectional thing which is really really&nbsp;&nbsp;

00:09:46.320 --> 00:09:55.280
cool. So like I said earlier, you could try to get&nbsp;
cloud code to execute a workflow uh a predefined&nbsp;&nbsp;

00:09:55.280 --> 00:10:00.560
workflow. You could set up commands. You could set&nbsp;
up a bunch of CloudMD files. All that's well and&nbsp;&nbsp;

00:10:00.560 --> 00:10:04.800
good, and I'm not telling you, I'm not here to&nbsp;
tell you, hey, don't try to do that. It's just&nbsp;&nbsp;

00:10:04.800 --> 00:10:08.960
that no matter how good the state-of-the-art&nbsp;
models get at following instructions,&nbsp;&nbsp;

00:10:08.960 --> 00:10:14.560
they're still inherently non-deterministic. And&nbsp;
you have something else which is the accumulation&nbsp;&nbsp;

00:10:14.560 --> 00:10:21.120
of entropy. Uh and what I mean by that is that at&nbsp;
every step of a given workflow that you just give&nbsp;&nbsp;

00:10:21.120 --> 00:10:30.400
an agent to to work on independently, errors and&nbsp;
uh you know misdirection and uh lack of you know&nbsp;&nbsp;

00:10:30.400 --> 00:10:36.320
problems with judgment mistakes add up right&nbsp;
I'm sure if you've done any amount of prompt&nbsp;&nbsp;

00:10:36.320 --> 00:10:41.840
chaining you've seen this like basically something&nbsp;
goes slightly wrong that makes the next step work&nbsp;&nbsp;

00:10:41.840 --> 00:10:47.920
a little bit worse or the model has to do more&nbsp;
work to recover. uh it's not ideal. What we're&nbsp;&nbsp;

00:10:47.920 --> 00:10:56.720
finding is that interle non-deterministic kinds of&nbsp;
structured workflow with uh sorry nondeterministic&nbsp;&nbsp;

00:10:56.720 --> 00:11:02.960
agentic workflows with uh deterministic kind of&nbsp;
structured workflows and scripts is actually the&nbsp;&nbsp;

00:11:02.960 --> 00:11:07.840
perfect combination. So what I mean by that is&nbsp;
that you take a workflow, a big workflow like&nbsp;&nbsp;

00:11:07.840 --> 00:11:14.080
let's say optimizing a test suite and you break&nbsp;
it down into component parts and you minimize&nbsp;&nbsp;

00:11:14.080 --> 00:11:21.280
the amount of instructions that you have to&nbsp;
give the agent to work on at any given step.

00:11:21.280 --> 00:11:28.960
That looks like giving claude code roast&nbsp;
workflows um on the on the one side. So&nbsp;&nbsp;

00:11:28.960 --> 00:11:33.600
on the left side of the slide here, what I'm&nbsp;
describing is like basically you tell claude,&nbsp;&nbsp;

00:11:33.600 --> 00:11:40.000
hey, I want to work on optimizing uh my tests,&nbsp;
but I have a workflow tool that handles the&nbsp;&nbsp;

00:11:40.000 --> 00:11:46.480
grading. So go ahead and call roast test grade&nbsp;
with this file or this directory and then take&nbsp;&nbsp;

00:11:46.480 --> 00:11:54.080
its recommendations and work on them. So that's&nbsp;
one way of using roast as a tool for cloud code.&nbsp;&nbsp;

00:11:54.080 --> 00:12:01.280
On the other side, ROSE includes a coding agent&nbsp;
tool that you can add to your workflows in as&nbsp;&nbsp;

00:12:01.280 --> 00:12:07.120
part of its configuration which wraps claude&nbsp;
code. So you could kick off a workflow in an&nbsp;&nbsp;

00:12:07.120 --> 00:12:13.200
automated fashion that let's say grades a&nbsp;
test uh and as part of the steps in that&nbsp;&nbsp;

00:12:13.200 --> 00:12:20.160
workflow you can kick off cloud code in SDK&nbsp;
mode and provide something that you want the&nbsp;&nbsp;

00:12:20.160 --> 00:12:28.080
agent to work on but on a narrow narrower&nbsp;
scope than to giving it the whole thing.

00:12:28.080 --> 00:12:37.520
I've already talked about test grading, but&nbsp;
to give you another example, um the the main&nbsp;&nbsp;

00:12:37.520 --> 00:12:42.960
application that we use at Shopify, like I said&nbsp;
before, is a big Ruby on Rails monolith. Ruby&nbsp;&nbsp;

00:12:42.960 --> 00:12:48.560
is a dynamic language that doesn't natively have&nbsp;
typing. So, we use an add-on typing system called&nbsp;&nbsp;

00:12:48.560 --> 00:12:55.760
Sorbet. Sorbet is not something that is super&nbsp;
super wellknown by the models. certainly has a&nbsp;&nbsp;

00:12:55.760 --> 00:13:03.120
little bit of knowledge of it, but the the kinds&nbsp;
of tools that you invoke when you're doing type&nbsp;&nbsp;

00:13:03.120 --> 00:13:09.680
checking and preparation of type files and things&nbsp;
like that is not something that is let's call it&nbsp;&nbsp;

00:13:09.680 --> 00:13:16.480
quote unquote intuitive to the models. very&nbsp;
very helpful to break anything up that has to&nbsp;&nbsp;

00:13:16.480 --> 00:13:21.920
do with like type checking or imp improving the&nbsp;
application of types in our codebase into these&nbsp;&nbsp;

00:13:21.920 --> 00:13:30.000
roast workflows where we actually interle calls&nbsp;
to the sorbet tools that are predefined like we're&nbsp;&nbsp;

00:13:30.000 --> 00:13:35.600
always going to run the type checking in this way&nbsp;
with a command line and then we interle that with&nbsp;&nbsp;

00:13:35.600 --> 00:13:41.760
giving the results of the type checking to claude&nbsp;
and saying hey uh please address the deficiencies&nbsp;&nbsp;

00:13:41.760 --> 00:13:48.160
that we found in this manual step. This is not&nbsp;
a super compelling video. I didn't have a ton of&nbsp;&nbsp;

00:13:48.160 --> 00:13:53.840
time to prepare this talk, but like basically um&nbsp;
if the video starts here, what you'll see is like&nbsp;&nbsp;

00:13:53.840 --> 00:14:01.440
the result of running one of these workflows um&nbsp;
to generate tests. So, it gets stuck here running&nbsp;&nbsp;

00:14:01.440 --> 00:14:07.040
coding agent. I'm talking to the uh cloud code&nbsp;
team about maybe giving us some ability to output&nbsp;&nbsp;

00:14:07.040 --> 00:14:12.080
what the coding agent is doing. But we see that&nbsp;
it's generating tests. I'm actually flipping over&nbsp;&nbsp;

00:14:12.080 --> 00:14:19.440
and running the test to verify that they run, or&nbsp;
rather to show you that they run, but this is kind&nbsp;&nbsp;

00:14:19.440 --> 00:14:26.080
of what it looks like at scale. It's a bit messy.&nbsp;
I should add if you want to try roast, um, it is&nbsp;&nbsp;

00:14:26.080 --> 00:14:31.200
a very early version. It does work. It has a cool&nbsp;
set of tools. It has cool features like being able&nbsp;&nbsp;

00:14:31.200 --> 00:14:38.320
to save your your session every time you run a&nbsp;
workflow. If any of you have tried to do workflow&nbsp;&nbsp;

00:14:38.320 --> 00:14:44.640
kinds of things, uh, one of the key benefits of&nbsp;
using a tool like roast is that for instance, if&nbsp;&nbsp;

00:14:44.640 --> 00:14:52.160
you have a five-step workflow, you don't have to&nbsp;
run the first four steps over and over again just&nbsp;&nbsp;

00:14:52.160 --> 00:14:58.080
to debug the fifth step. You can just go ahead and&nbsp;
replay from the fourth step afterwards and then,&nbsp;&nbsp;

00:14:58.080 --> 00:15:04.000
you know, work on it. Big big timesaver. We&nbsp;
also do things like incorporate function uh tool&nbsp;&nbsp;

00:15:04.000 --> 00:15:09.360
function caching. Uh a lot of times when you're&nbsp;
developing these workflows, you're kind of working&nbsp;&nbsp;

00:15:09.360 --> 00:15:15.440
on the same data set. If you're only working in&nbsp;
an agentic tool, you kind of have to give it the&nbsp;&nbsp;

00:15:15.440 --> 00:15:20.160
whole thing and let it run from the beginning&nbsp;
and do all the tool things that it's going to&nbsp;&nbsp;

00:15:20.160 --> 00:15:26.320
do all the function calling. Uh if you're using a&nbsp;
tool like roast, you can do that and have all your&nbsp;&nbsp;

00:15:26.320 --> 00:15:37.280
function to uh you know calls cached at the roast&nbsp;
level so that they just execute super super fast.

00:15:37.280 --> 00:15:45.600
I mentioned before um but just to bring it home&nbsp;
we are using cloud SDK as a tool for roast.&nbsp;&nbsp;

00:15:45.600 --> 00:15:52.400
So specifically the kinds of things that we're&nbsp;
using that for um is that the configured roast&nbsp;&nbsp;

00:15:52.400 --> 00:15:59.200
workflow oneshots uh a code migration for instance&nbsp;
because it's kind of like we know exactly what we&nbsp;&nbsp;

00:15:59.200 --> 00:16:03.280
want to do. We don't want to beat around the bush&nbsp;
or have to discuss what it is we're going to do&nbsp;&nbsp;

00:16:03.280 --> 00:16:09.600
with Claude. So we're just going to go ahead and&nbsp;
do that just using regular chat completion style&nbsp;&nbsp;

00:16:09.600 --> 00:16:15.840
uh prompting. And then once we have a starting&nbsp;
place, we hand that over to Claude using the SDK&nbsp;&nbsp;

00:16:15.840 --> 00:16:22.400
command line and say, "Hey, uh, run the test&nbsp;
for this." And then if it's broken, fix it,&nbsp;&nbsp;

00:16:22.400 --> 00:16:27.520
iterate on on on doing it. Again, these&nbsp;
are these are these are things that are&nbsp;&nbsp;

00:16:27.520 --> 00:16:32.400
not necessarily that useful to the indiv,&nbsp;
you know, to the individual developer,&nbsp;&nbsp;

00:16:32.400 --> 00:16:36.240
like as they're going about their day,&nbsp;
probably they're just going to use cloud code.&nbsp;&nbsp;

00:16:36.240 --> 00:16:41.440
But if you're doing this at scale or as part of&nbsp;
repeatable processes or as part of reacting to&nbsp;&nbsp;

00:16:41.440 --> 00:16:49.920
PRs or anything like that uh you know as part&nbsp;
of data pipelines becomes super super useful.

00:16:49.920 --> 00:16:54.240
I want to leave some time for questions. So I'm&nbsp;
just going to move on a little bit uh faster. I&nbsp;&nbsp;

00:16:54.240 --> 00:17:01.600
wanted to mention that uh from experience um&nbsp;
one of the things that's a little bit tricky&nbsp;&nbsp;

00:17:01.600 --> 00:17:09.200
when you're using uh cloud code SDK is kind of&nbsp;
figuring out what tools you need. Um however an&nbsp;&nbsp;

00:17:09.200 --> 00:17:13.920
option that doesn't I think get enough love or&nbsp;
get mentioned especially when you're prototyping&nbsp;&nbsp;

00:17:13.920 --> 00:17:19.600
is you can just say dangerously skip permissions&nbsp;
which just kind of lets it do whatever it wants.&nbsp;&nbsp;

00:17:19.600 --> 00:17:23.920
uh and you know when you're prototyping&nbsp;
and figuring out how you know how you're&nbsp;&nbsp;

00:17:23.920 --> 00:17:28.480
going to use your coding agent that's often&nbsp;
very useful and as I was kind of giving some&nbsp;&nbsp;

00:17:28.480 --> 00:17:32.240
initial versions of the this talk to my&nbsp;
colleagues they said hey would probably&nbsp;&nbsp;

00:17:32.240 --> 00:17:37.600
be useful to put an example prompt of what it&nbsp;
looks like when you include a coding agent in&nbsp;&nbsp;

00:17:37.600 --> 00:17:43.440
uh in your workflow. So uh I put an example&nbsp;
prompt in there. Uh use your code agent tool&nbsp;&nbsp;

00:17:43.440 --> 00:17:48.640
function to raise the branch coverage level&nbsp;
of the following test above 90%. After each&nbsp;&nbsp;

00:17:48.640 --> 00:17:59.040
modification run rake test with coverage p you&nbsp;
know path to the test etc. You get the picture.

00:17:59.040 --> 00:18:04.560
So finally hopefully you've liked this&nbsp;
introduction. I know I know that maybe to&nbsp;&nbsp;

00:18:04.560 --> 00:18:09.920
some of you this might seem a little bit boring&nbsp;
but to us kind of making that discovery that&nbsp;&nbsp;

00:18:09.920 --> 00:18:16.240
interle these deterministic and non-deterministic&nbsp;
kinds of processes together uh and leveraging&nbsp;&nbsp;

00:18:16.240 --> 00:18:22.000
the power of cloud code was actually a magical&nbsp;
com uh combination is taking off like wildfire&nbsp;&nbsp;

00:18:22.000 --> 00:18:28.160
within Shopify um you know this is something&nbsp;
we just launched we've had it internally&nbsp;&nbsp;

00:18:28.160 --> 00:18:34.640
uh within our development kind of environment for&nbsp;
test grading and optimization probably for five or&nbsp;&nbsp;

00:18:34.640 --> 00:18:40.160
6 weeks now and we launched it as open source&nbsp;
I think two or 3 weeks ago and it's starting&nbsp;&nbsp;

00:18:40.160 --> 00:18:45.600
to take off like wildfire at this point now that&nbsp;
people realize hey there's a standardized solution&nbsp;&nbsp;

00:18:45.600 --> 00:18:50.080
uh also because of time pressure I wasn't able to&nbsp;
show you all the features of roast it actually has&nbsp;&nbsp;

00:18:50.080 --> 00:18:57.200
a lot of cool things uh like just being able to&nbsp;
declare inline prompts within your workflows uh&nbsp;&nbsp;

00:18:57.200 --> 00:19:04.560
being able to declare inline uh bash commands Uh,&nbsp;
and it has a lot of conventionoriented things. So,&nbsp;&nbsp;

00:19:04.560 --> 00:19:09.360
if anyone raise your hand if you've ever used&nbsp;
Ruby on Rails or you like Ruby on Rails. Yay.&nbsp;&nbsp;

00:19:09.360 --> 00:19:14.080
All right, we got some people in the house. So,&nbsp;
this I'm I'm a Rails guy. I wrote the book The&nbsp;&nbsp;

00:19:14.080 --> 00:19:19.440
Rails way back in the day and I really like Ruby&nbsp;
on Rails and it's takes a convention oriented&nbsp;&nbsp;

00:19:19.440 --> 00:19:24.400
approach. That's kind of what you get with Rast.&nbsp;
So it has things like the ability to define your&nbsp;&nbsp;

00:19:24.400 --> 00:19:30.080
prompts and then put a output template alongside&nbsp;
it where you you know you're able to transform&nbsp;&nbsp;

00:19:30.080 --> 00:19:36.960
the output using ERB. Very very Rails-like. So if&nbsp;
you like Ruby on Rails I think you'll like Rast.&nbsp;&nbsp;

00:19:36.960 --> 00:19:42.080
Uh it looks like we have about four minutes for&nbsp;
questions. So if anyone wants to step up to the&nbsp;&nbsp;

00:19:42.080 --> 00:20:01.360
mic, give you a chance. [Applause] Have you tried&nbsp;
agent generating Python code to engage agent?

00:20:01.360 --> 00:20:05.040
Well, first of all, no because I&nbsp;
don't write Python in principle.&nbsp;&nbsp;

00:20:05.040 --> 00:20:11.920
But the have I tried agent generated code to&nbsp;
invoke an agent? Correct. Yes. So basically&nbsp;&nbsp;

00:20:11.920 --> 00:20:19.120
using Python uh either in your interpreter or&nbsp;
in code execution uh to orchestrate sub agents&nbsp;&nbsp;

00:20:19.120 --> 00:20:23.280
um and through that do the same same things&nbsp;
as you do like migrations and test coverage&nbsp;&nbsp;

00:20:23.280 --> 00:20:31.520
and whatnot. No. And if I understand the&nbsp;
the thrust of your question correctly,&nbsp;&nbsp;

00:20:31.520 --> 00:20:37.520
I'm not I'm not sure that we w we would in the&nbsp;
context of of doing roast. So the direction that&nbsp;&nbsp;

00:20:37.520 --> 00:20:42.480
we're going with roast is the introduction&nbsp;
of things that you would normally associate&nbsp;&nbsp;

00:20:42.480 --> 00:20:50.480
with workflows. So the ability to put like&nbsp;
control flow, conditionals, branching, looping,&nbsp;&nbsp;

00:20:50.480 --> 00:20:55.760
uh things like that which are kind of quality&nbsp;
of life if you're a workflow developer. What&nbsp;&nbsp;

00:20:55.760 --> 00:21:00.880
makes it unique though is that this this is very&nbsp;
much written for the AI age and for LLMs. So for&nbsp;&nbsp;

00:21:00.880 --> 00:21:09.440
instance, your conditionals uh allow you to put&nbsp;
in a prompt uh or a bash script or a step you know&nbsp;&nbsp;

00:21:09.440 --> 00:21:15.760
like a fullfeatured let's call it a fullfeatured&nbsp;
prompt versus an inline prompt and the results of&nbsp;&nbsp;

00:21:15.760 --> 00:21:22.080
invoking that prompt can be coerced into like for&nbsp;
instance a true or false or if it's in the context&nbsp;&nbsp;

00:21:22.080 --> 00:21:27.360
of something that expects a collection to iterate&nbsp;
over the result of the prompt is coerced into a&nbsp;&nbsp;

00:21:27.360 --> 00:21:34.080
list and then iterates over it. So, um, I know&nbsp;
that you asked about code generation. That's a&nbsp;&nbsp;

00:21:34.080 --> 00:21:38.240
cool thing. I might actually have to think about&nbsp;
that and see if, uh, it fits into the picture,&nbsp;&nbsp;

00:21:38.240 --> 00:21:54.923
but cool. Yeah. Thanks. All right. Thank&nbsp;
you very much. [Music] [Applause] [Music]

